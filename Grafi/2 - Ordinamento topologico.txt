/* ************************************************************************************************ */
VERSIONE 1: BFS CON CODA E GRADO ENTRANTE
/* ************************************************************************************************ */

GradoEntrante (G)
	for each v in V 
		GE[v] = 0
		
	for each v in V
		for each u in Adj[v]
			GE[u] = GE[u] + 1
	
	return GE

/* ************************************************************************************************ */

OrdinamentoTopologico (G)
	GE [] = GradoEntrante (G)

	for each v in V 
		if GE[v] == 0
			Q = Enqueue (Q,v)
	
	while Q != NIL
		h = Head (Q)
		
		Visita (h) //visita il vertice sorgente (seguendo un ordinamento topologico)
		
		for each v in Adj[h]
			
			GE[v] = GE[v] - 1 //visita la stella uscente (decrementandone il grado entrante)
			
			if GE[v] == 0 then
				Q = Enqueue (Q, v)

		Q = Dequeue (Q)
		
		
 Notare che è essenzialmente una BFS dove GE[v] = 0 equivale a color[v] = bianco.
 Per questo motivo, è possibile accodare da subito tutti i vertici con grado entrante 0, usandoli come sorgenti.
 (Facendolo in una BFS generica, si accoderebbero fin da subito tutti i vertici, perché il vettore dei colori è stato appena inizializzato).

/* ************************************************************************************************ */
VERSIONE 2: DFS CON STACK
/* ************************************************************************************************ */

DFS (G)
	color [] = Init (G)
	tempo = 0
	S = NIL
	for each v in V
		if color[v] == bianco then
			DFS_visit (G,v)
			
DFS_visit (G,s)
	color[s] = grigio
	
	for each v in Adj[s]		
		if color[v] == bianco then 
			DFS_visit (G,v)
			
	color[s] = nero
	S = Push (S, v) //in postorder: mette in cima il vertice su cui è finita la visita