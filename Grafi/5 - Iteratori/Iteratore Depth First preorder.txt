class PreorderDepthIterator
{
	Node curr

	Stack S
	Vector color
	
	int idx
}

PreorderDepthIterator (G)
{
	if (V.Size() == 0)
	{
		throw exception
	}
	
	InitColor (G)
	idx = 0

	curr = V[idx++]
	itr = Adj[curr] //iteratore sulla lista di adiacenza di curr
	
	S.Push (curr, itr)
	color[curr] = gray
}

Operator++()
{
	if (Terminated())
	{
		throw exception
	}

	while (!S.Empty())
	{
		(curr, itr) = S.Top()

		while (!itr.Terminated())
		{
			v = *itr //vertice sulla lista di adiacenza di curr
			++itr
			
			if (color[v] == white)
			{
				curr = v 
				itr = Adj[curr]

				S.push (curr, itr)
				color[v] = gray
				
				return; //senza fare pop: potrei dover esplorare altri vertici raggiunti da questa sorgente
			}
		}

		color[curr] = black
		S.Pop() //alla fine del while, ho esplorato tutti i vertici
	}

	//se lo stack si Ã¨ svuotato senza trovare vertici bianchi
	
	while (!Terminated())
	{
		v = V[idx++]

		if (color[v] == white)
		{
			curr = v 
			itr = Adj[curr]
			
			S.Push (curr, itr)
			color[curr] = gray

			break
		}
	}

	if (S.Empty() && Terminated())
	{
		throw exception
	}
}

Operator* ()
{
	return curr
}

Terminated()
{
	return idx >= V.Size()
}

Reset ()
{
	S.Clear()
	Initcolor()
	idx = 0

	curr = V[idx++]
	itr (Adj[curr])

	S.Push(curr, itr)
	color[curr] = gray
}