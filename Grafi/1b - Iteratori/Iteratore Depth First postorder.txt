class PostorderDepthIterator
{
	Node curr

	Stack S
	int idx

	Vector color
}

PostorderDepthIterator (G)
{
	if (V.Size() == 0)
	{
		throw exception
	}

    InitColor ()

	idx = 0
    curr = V[idx++]
	itr (Adj[curr])

    S.Push(curr, itr)
    color[curr] = gray

    LeftMostLeaf()
}

Operator++()
{
	if (Terminated())
	{
		throw exception
	}
	
	while (!S.Empty())
	{
		(curr, itr) = S.Top()

		while (!itr.Terminated())
		{
			v = *itr;
			++itr;
			
			if (color[v] == white)
			{
				S.push (v, itr (Adj[v]))
				color[v] = gray
				
				LeftMostLeaf()
				
				return
			}
		}

		color[curr] = black 
		S.Pop()
	}

	while (!Terminated())
	{
		curr = V[idx++]
		itr (Adj[curr])

		if (color[curr] == white)
		{
			S.Push(curr, itr)
			color[curr] = gray 

			LeftMostLeaf()
			break
		}
	}	

	if (S.Empty() && Terminated())
	{
		throw exception
	}
}

Operator* ()
{
	return curr
}

Terminated()
{
	return idx >= V.Size()
}

Reset ()
{
	S.Clear()
	Initcolor()
	idx = 0

	curr = V[idx++]
	itr (Adj[curr])

	S.Push(curr, itr)
	color[curr] = gray

	LeftMostLeaf()
}

LeftMostLeaf()
{
	(curr, itr) = S.Top()
	while (!itr.Terminated())
	{
		v = *itr //v in Adj[curr]
		++itr

		if (color[v] == white)
		{
			S.Push(v, itr)
			color[v] = gray

			(curr, itr) = S.Top()
		}
	}
}