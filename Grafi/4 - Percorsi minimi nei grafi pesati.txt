Init (G)
	for each v in V 
		d[v] = infinito
	return d[]

/* ********************************* */

Relax (u, v, w)
	if d[v] > d[u] + w(u, v)
		d[v] = d[u] + w(u, v)

Notare la somiglianza con la visita usata sulla BFS per calcolare la distanza minima (in grafi non pesati)

/* ********************************* */

BellmanFord (G, s, w)
	ciclo_negativo = false
	d[] = Init (G)
	d[s] = 0
	
	for (i = 0; i < |V|-1; i++)
		for each u in V 
			for each v in Adj[u]
				Relax(u,v,w)
		
	for each u in V
		for each v in Adj[u]
			if d[v] > d[u] + w(u, v)
				ciclo_negativo = true
	

BellmanFord deve eseguire Relax su ogni arco |V|-1 volte. 
T(BellmanFord) = O (|V|*|E|)

/* ********************************* */

Dijkstra (G, s, w)
	d [] = Init (G)
	d [s] = 0
	
	S = NIL
	Q = V
	
	while Q != NIL 
		u = ExtractMin (Q)
		S = S U {u}
		Q = Q \ {u}
		
		for each v in Adj[u]
			Relax (u, v, w)

Dijkstra esegue Relax su ogni arco una sola volta,
Ma seleziona a ogni iterazione il vertice con la stima della distanza da s piú piccola.

Dal corso di algebra: 
una partizione di un insieme A è composta da sottoinsiemi di A tali che:
-Nessuno degli insiemi sia vuoto
-La loro intersezione sia vuota
-La loro unione sia A

S e Q sono insiemi dinamici che formano sempre una partizione di V
Per ogni iterazione,
S contiene i vertici sulla cui stella uscente è stata eseguita l'operazione di Relax
Q contiene i vertici non ancora inseriti in S

Il vertice di cui si vuole esplorare la stella uscente viene estratto da Q tramite la funzione ExtractMin.
Il tempo dipende dall'implementazione di Q e dalla funzione ExtractMin.

T(Dijkstra) = |V| * T(ExtractMin) + |E| * T(Relax)